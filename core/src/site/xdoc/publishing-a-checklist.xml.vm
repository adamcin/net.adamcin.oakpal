<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>The Basic Checklist</title>
    </properties>
    <body>
        <h1>The Basic Checklist</h1>
        <section name="How Checklists are Discovered">
            <p>
                OakPAL Checklists are discovered by scanning MANIFEST.MF files on the classpath for
                <code>Oakpal-Checklist</code> headers, which each define a comma-separated lists of JAR-relative
                resource paths. The MANIFEST.MF should also use a <code>Bundle-SymbolicName</code> or
                <code>Automatic-Module-Name</code> header to declare a module name for its exported checklists.
            </p>
            <p>For example, the oakpal-core jar exports a single checklist,
                <code>
                    <a href="${project.scm.url}/blob/master/core/src/main/resources/OAKPAL-INF/checklists/basic.json">
                        OAKPAL-INF/checklists/basic.json
                    </a>
                </code>
                checklist, and identifies itself as
                <code>net.adamcin.oakpal.core</code>, in
                <a href="${project.scm.url}/blob/master/core/src/main/resources/META-INF/MANIFEST.MF">
                    META-INF/MANIFEST.MF</a>.
            </p>
            <p>
                Discovered checklists are referenceable by <code>module/name</code>, as in
                <code>net.adamcin.oakpal.core/basic</code>, or for shorthand, just <code>name</code>, as in
                <code>basic</code>. Shorthand is matched according to the order of checklist discovery on the classpath.
            </p>
        </section>
        <section name="The Structure of a Checklist">
            <p>Checklists are json files that match the basic structure of this example:</p>
            <div class="source">
<pre>
{
    "name": "acmeAemChecks",
    "checks": [
        {
            "name": "require-acme-metadata",
            "impl": "com.example.acme.oakpal.checks.RequireAcmeMetadataCheck"
        },
        {
            "name": "OSGi Configs Check",
            "impl": "com.example.acme.oakpal.checks.OsgiConfigsProgressCheckFactory",
            "config": {
                "installerPaths": ["/libs","/apps"]
            }
        },
        {
            "name": "No embedded clientlibs",
            "impl": "OAKPAL-INF/checks/noClientLibEmbed.js",
            "config": {
                "allow": true,
                "boo": false
            }
        }
    ],
    "forcedRoots: [
        {
            "path": "/content/acme",
            "primaryType": "sling:Folder",
            "mixinTypes": []
        }
    ],
    "cndNames": [
        "OAKPAL-INF/nodetypes/acme.cnd"
    ],
    "jcrNodetypes": {
        "sling:ResourceSuperType": {
            "@":[
                "mixin"
            ],
            "-":[{
                "name":"sling:resourceSuperType",
                "type":"String"
            }]
        }
    },
    "jcrPrivileges": [
        "acme:distributeRedditGold"
    ],
    "jcrNamespaces": [
        {
            "prefix": "sling",
            "uri": "http://sling.apache.org/jcr/sling/1.0"
        }
    ]
}
</pre>
            </div>
            <p>
                A checklist basically has a <code>name</code> and a list of <code>checks</code>, which represent
                <code>CheckSpecs</code>. Each check spec must have at least a <code>name</code>, and an
                <code>impl</code>
                representing a className of a <code>ProgressCheckFactory</code> or
                <code>ProgressCheck</code>
                implementation, or a classpath resource name to locate a script progress check. For script checks and
                <code>ProgressCheckFactory</code>
                implementations, you can specify an optional <code>config</code> object to
                serve as a default configuration when this check spec is loaded.
            </p>
            <p>
                A checklist may also specify a few optional properties that the <tt>OakMachine</tt> can load before each
                scan as an <tt>InitStage</tt>. When the checklist is actively selected in the maven plugin, these resources
                will be used to to initialize the repository to a state that serves as a starting context for checks.
            </p>
            <dl>
                <dt><tt>cndNames</tt></dt>
                <dd>Specify an array of CND (compact nodetype definition) files that should be installed in the repository
                    prior to the scan</dd>
                <dt><tt>jcrNamespaces</tt></dt>
                <dd>Specify a list of JCR namespace prefix-to-uri mappings in order to register new ones, or to remap
                    a registered namespace to a different prefix in the scan session.</dd>
                <dt><tt>jcrNodetypes</tt></dt>
                <dd>Register a set of node types to support creation of forced roots prior to the scan.</dd>
                <dt><tt>jcrPrivileges</tt></dt>
                <dd>Register a list of JCR privileges to support the installation of rep:policy nodes that reference
                    them.</dd>
                <dt><tt>forcedRoots</tt></dt>
                <dd>Specify a list of root paths to create (akin to using <tt>mkdir -p</tt>), and optionally specify a
                    primary type and/or a list of mixin types to apply to the leaf node. Intermediate paths will be
                    created as <tt>nt:unstructured</tt> nodes.</dd>
            </dl>
            <p>For a real example, refer to the <a href="the-basic-checklist.html">the basic checklist</a>.
            </p>
        </section>
    </body>
</document>