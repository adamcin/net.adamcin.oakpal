<!--
  ~ Copyright 2017 Mark Adamcin
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document>
    <properties>
        <title>About OakPAL - Oak Package Acceptance Library</title>
    </properties>
    <body>
        <section name="About OakPAL">
            <p>
                OakPAL was inspired by my continuing attempts to improve the validation features of the <a
                    href="https://wiki.jenkins-ci.org/display/JENKINS/CRX+Content+Package+Deployer+Plugin">CRX Content
                Package Deployer Plugin for Jenkins</a>. It relies on another library I created called
                granite-client-packman. The <a
                    href="http://adamcin.net/granite-client-packman/apidocs/net/adamcin/granite/client/packman/validation/PackageValidator.html">
                validation features
            </a> I added to that library began to hit significant
                limitations because I was approaching the task from a static analysis perspective. It's easy to
                statically examine a package for the content that it will create in a repository, because this content
                exists in the artifact itself, and is predictably shaped by the package's workspace filter. It is also
                relatively easy to check package metadata for completeness and conformance to CI assumptions and to
                parse DocView XML files to ensure well-formedness.
            </p>

            <p>
                However, static package analysis leaves some major gaps and edge cases unaddressed:
            </p>

            <ol>
                <li>
                    Inability to make deterministic assertions about what existing content will be deleted or changed
                    upon
                    package installation.
                </li>
                <li>
                    Inability to account for NodeType constraints.
                </li>
                <li>
                    Inability to perform analysis of multiple packages that will be installed in sequence.
                </li>
            </ol>

            <p>
                After ultimately failing to completely address the above issues with heuristics and broad and/or
                high-level restrictions on ACHandling and FilterSet import modes, I finally realized that the only way
                to properly test a package is by installing it, and watching (listening?) for what happens to the target
                repository.
            </p>

            <p>
                The CRX Jenkins plugin (and the content-package-maven-plugin) make it possible to install packages in
                AEM servers over HTTP, but the simple protocol returns only limited information about errors, you have
                to account for transport errors and authentication, and the heavyweight nature of the application makes
                it painful to implement a CI process that can reset an AEM server to an exact precondition state.
            </p>

            <p>
                OakPAL was designed to fill this gap, by providing:
            </p>
            <ol>
                <li>
                    A model for repeatable repository state initialization using InitStages and preinstall packages.
                </li>
                <li>
                    A PackageScanner class with a fluent Builder API that encapsulates the creation of a fresh Oak
                    repository, state initialization, and package installation for every set of package files.
                </li>
                <li>
                    A pluggable listener API with classpath discovery of third-party <a
                        href="https://github.com/adamcin/oakpal/blob/master/core/src/main/resources/OAKPAL-INF/checklists/basic.json">
                    Checklists</a>, <a href="oakpal-core/apidocs/net/adamcin/oakpal/core/ProgressCheck.html">
                    ProgressChecks</a>, and
                    <a href="oakpal-maven-plugin/writing-a-script-check.html">ScriptProgressChecks</a>, which receive
                    progress tracker events along with read-only access to
                    incremental
                    repository state, and which can report Violations at the end of a scan.
                </li>
            </ol>

            <p>
                The first integration target for this library is Maven, via the <a
                    href="oakpal-maven-plugin/index.html">oakpal-maven-plugin</a>. Depending on
                interest, future integrations would likely include the Jenkins CRX plugin and a command-line interface
                deployable with Docker.
            </p>
        </section>
    </body>
</document>